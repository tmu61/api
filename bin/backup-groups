#!/bin/bash

. RESTCALL

usage() {
        echo "usage: ${0##*/} [options]"
        echo ""
        echo "Options:"
        echo "  -h                      : Display help"
        echo "  -d <backup directory>   : directory to save the backup to"
	echo "  -f <backup file>        : name of backup file (defaults to groups-backup-$(date '+%d.%m.%Y-%H.%M.%S').json"
        echo ""
}

#---------------------------------------------------------------------------------------------------------
# Parse arguments

unset BACKUP_DIR BACKUP_FILE

while getopts "hd:f:" opt; do
        case $opt in
                h)
                        usage
                        exit 0
                        ;;
                d)
                        BACKUP_DIR="$OPTARG"
                        ;;
		f)
			BACKUP_FILE="$OPTARG"
			if echo $BACKUP_FILE|grep "/"
			then
				RED
				echo "filename must not contain '/'"
				echo "use -d <backup directory> to specify the path"
				useage
				exit 3
			fi
			;;
                \?)
                        echo "Invalid option: $OPTARG" >&2
                        usage
                        exit 2
                        ;;
                :)
                        echo "Option -$OPTARG requires an argument."
        esac
done

shift $(( OPTIND -1 ))

BACKUP_DIR=$(echo $BACKUP_DIR|sed -e 's#/*$##')
[ -z "$BACKUP_DIR" ] && BACKUP_DIR=$PWD
if [ -z "$BACKUP_FILE" ]
then
	BACKUP_FILE=$BACKUP_DIR/groups-backup-$(date '+%d.%m.%Y-%H.%M.%S').json
else
	BACKUP_FILE=$BACKUP_DIR/$BACKUP_FILE
fi

if [ ! -d $BACKUP_DIR ]
then
	mkdir -p $BACKUP_DIR
fi
echo "BACKUP_FILE=$BACKUP_FILE"
NGROUPS=$(GET /policy/api/v1/infra/domains/default/groups|jq '.result_count')
echo "backup of $NGROUPS GROUPS to file $BACKUP_FILE"
GET /policy/api/v1/infra/domains/default/groups >$BACKUP_FILE



#BACKUP_FILE=$BACKUP_DIR/$(date '+%d.%m.%Y-%H.%M.%S-backup.json')

#if [ "$CHECK_POLICIES" == YES ]
#then
#	BLUE; echo checking policies; NC
#	GET /policy/api/v1/infra/domains/default/security-policies|jq -r '.results[].display_name' | while read policy_name
#	do
#		# let's see if this is a policy with a date in the display_name
#		if echo $policy_name|grep '20[0-9][0-9]-[01][0-9]-[0-3][0-9]' >/dev/null
#		then
#			echo -n "Policy with date: \"$policy_name\" "
#			policy_date=$(echo $policy_name | sed -e 's/^.*\(20[0-9][0-9]-[01][0-9]-[0-3][0-9]\).*/\1/')
#			policy_seconds=$(date -d $policy_date +%s)
#			now_seconds=$(date +%s)
#			if [ "$now_seconds" -gt "$policy_seconds" ]
#			then
#				RED; echo expired
#				policy_path=$( GET /policy/api/v1/infra/domains/default/security-policies| jq ".results[]|select (.display_name==\"$policy_name\").path" )
#				if [ "$DO_CLEANUP" == IReallyWantToCleanup ]
#				then
#					echo "   DELETE /policy/api/v1$policy_path"
#					eval DELETE /policy/api/v1$policy_path
#				else
#					echo "use the following command to delete it:"
#					echo "   DELETE /policy/api/v1$policy_path"
#				fi
#			else
#				GREEN; echo active
#			fi
#			NC
#			echo
#		fi
#	done
#fi
#
#if [ "$CHECK_RULES" == YES ]
#then
#	BLUE; echo checking rules; NC
#	GET /policy/api/v1/infra/domains/default/security-policies|jq -r '.results[].display_name' | while read policy_name
#	do
#		policy_id=$( GET /policy/api/v1/infra/domains/default/security-policies| jq -r ".results[]|select (.display_name==\"$policy_name\").id" )
#		GET /policy/api/v1/infra/domains/default/security-policies/$policy_id|jq -r '.rules[].display_name' | while read rule_name
#		do
#			if echo $rule_name|grep '20[0-9][0-9]-[01][0-9]-[0-3][0-9]' >/dev/null
#			then
#				echo -n "Rule with date in policy \"$policy_name\": \"$rule_name\" "
#				rule_date=$(echo $rule_name | sed -e 's/^.*\(20[0-9][0-9]-[01][0-9]-[0-3][0-9]\).*/\1/')
#				rule_seconds=$(date -d $rule_date +%s)
#				now_seconds=$(date +%s)
#				if [ "$now_seconds" -gt "$rule_seconds" ]
#				then
#					RED; echo expired
#					rule_path=$(GET /policy/api/v1/infra/domains/default/security-policies/$policy_id|jq ".rules[]|select (.display_name==\"$rule_name\").path")
#					if [ "$DO_CLEANUP" == IReallyWantToCleanup ]
#					then
#						echo "   DELETE /policy/api/v1$rule_path"
#						eval DELETE /policy/api/v1$rule_path
#					else
#						echo "use the following command to delete it:"
#						echo "   DELETE /policy/api/v1$rule_path"
#					fi
#				else
#					GREEN; echo active
#				fi
#				NC
#				echo
#			fi
#		done
#	done
#fi
#
