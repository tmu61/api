#!/bin/bash
. RESTCALL

usage() {
	echo
        echo "usage: ${0##*/} [options]"
        echo ""
        echo "Options:"
	echo "  -v <VM>             : Display name of the VM"
	echo "  -t <TAG>            : Tag"
	echo "  -s <SCOPE>          : Scope"
	echo "  -i <infile>         : get VMS from file instead of API"
	echo
        echo "  -h                  : Display help"
        echo ""
}

unset ALLVMS_JSON
#---------------------------------------------------------------------------------------------------------
# Parse arguments

while getopts "v:t:s:hi:" opt; do
        case $opt in
                h)
                        usage
                        exit 0
                        ;;
		v)
			VM=$OPTARG
			;;
		i)
			INFILE=$OPTARG
			if [ ! -f $INFILE ]
			then
				echo "$INFILE does not exist"
				usage
				exit 3
			fi
			;;
                \?)
                        echo "Invalid option: $OPTARG" >&2
                        usage
                        exit 2
                        ;;
                :)
                        echo "Option -$OPTARG requires an argument."
        esac
done

shift $(( OPTIND -1 ))

E=0
if [ -z "$VM" ]
then
	RED
	echo "VM is required"
	NC
	E=1
fi

if [ "$E" = "1" ]
then
	usage
	exit 1
fi

[ "$DEBUG" ] && echo "VM=$VM"

if [ -z "$INFILE" ]
then
	ALLVMS_JSON=$(GET /api/v1/fabric/virtual-machines)
else
	ALLVMS_JSON=$(cat $INFILE)
fi

VMJSON=$(echo $ALLVMS_JSON | jq ".results[]|select (.display_name==\"$VM\")")
TAGS=$(echo $ALLVMS_JSON| jq ".results[]|select (.display_name==\"$VM\")|.tags")
ID=$(echo $ALLVMS_JSON | jq ".results[]|select (.display_name==\"$VM\")"|jq -r ".external_id")
L=$(echo $ID|wc -c)

if [ "$L" != 1 ]
then
	echo $TAGS|jq '.'
else
	echo $VM not found
	echo $L
	exit 1
fi

