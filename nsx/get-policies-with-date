#!/bin/bash

. RESTCALL

usage() {
        echo "usage: ${0##*/} [options]"
        echo ""
        echo "Options:"
        echo "  -h                        : Display help"
	echo "  -p                        : display policies"
	echo "  -r                        : display rules"
	echo "  -e                        : only expired rules/policies"
	echo "  -s                        : silent mode. Only required output, no colors"
	echo "  -o <filename>             : redirect stdout to <filename>, delete <filename> if empty"
	echo "  -C IReallyWantToCleanup   : Auto cleanup expired objects"
        echo ""
        echo ""
	echo "Examples:"
        echo ""
	echo "Display all policies and rules with a date in the name:"
	echo "  ${0##*/} -p -r"
        echo ""
        echo "The same as before, but only expired objects:"
	echo "  ${0##*/} -p -r -e"
        echo ""
        echo "Automatically delete any expired objects"
	echo "  ${0##*/} -p -r -C IReallyWantToCleanup"
        echo ""
        echo "Create a file with all expired objects. The file gets deleted in case it's empty"
	echo "  ${0##*/} -p -r -e -s -o /data/reports/example.out"
        echo ""
        echo "Multiple options can be combined. Same as before:"
	echo "  ${0##*/} -preso /data/reports/example.out"
        echo ""
}

#---------------------------------------------------------------------------------------------------------
# Parse arguments

unset CHECK_POLICIES CHECK_RULES CHECK_EXPIRED_ONLY SILENT_MODE CHECK_EXPIRED_ONLY DO_CLEANUP OUTPUT_FILENAME #unset any variables that you think you should

#exec > output

while getopts "hprC:eso:" opt; do
        case $opt in
                h)
                        usage
                        exit 0
                        ;;
		p)
			CHECK_POLICIES="YES"
			;;
		r)
			CHECK_RULES="YES"
			;;
		e)
			CHECK_EXPIRED_ONLY="YES"
			;;

		s)	
			SILENT_MODE="YES"
			RESTCALL_NOCOLORS="YES"
			;;
		o)
			OUTPUT_FILENAME=$OPTARG
			OUTPUT_DIR=${OUTPUT_FILENAME%/*}
			mkdir -p $OUTPUT_DIR
			exec > $OPTARG
			;;

		C)
			DO_CLEANUP=$OPTARG
			if [ ! $DO_CLEANUP = IReallyWantToCleanup ]
			then
				echo "You are required to specify \"-C IReallyWantToCleanup\" in case you really want this"
				exit 4
			fi
			;;
                \?)
                        echo "Invalid option: $OPTARG" >&2
                        usage
                        exit 2
                        ;;
                :)
                        echo "Option -$OPTARG requires an argument."
        esac
done

shift $(( OPTIND -1 ))

. RESTCALL

if [ "$CHECK_POLICIES" = YES ]
then
	[ "$SILENT_MODE" ] || { BLUE; echo checking policies; NC; }
	GET /policy/api/v1/infra/domains/default/security-policies|jq -r '.results[].display_name' | while read policy_name
	do
		# let's see if this is a policy with a date in the display_name
		if echo $policy_name|grep '20[0-9][0-9]-[01][0-9]-[0-3][0-9]' >/dev/null
		then
			policy_date=$(echo $policy_name | sed -e 's/^.*\(20[0-9][0-9]-[01][0-9]-[0-3][0-9]\).*/\1/')
			policy_seconds=$(date -d $policy_date +%s)
			now_seconds=$(date +%s)
			if [ "$now_seconds" -gt "$policy_seconds" ]
			then
				echo -n "Policy with date: \"$policy_name\" "
				RED; echo expired
				policy_path=$( GET /policy/api/v1/infra/domains/default/security-policies| jq ".results[]|select (.display_name==\"$policy_name\").path" )
				if [ "$DO_CLEANUP" = IReallyWantToCleanup ]
				then
					echo "   DELETE /policy/api/v1$policy_path"
					eval DELETE /policy/api/v1$policy_path
				else
					echo "use the following command to delete it:"
					echo "   DELETE /policy/api/v1$policy_path"
				fi
			else
				if [ ! "$CHECK_EXPIRED_ONLY" = "YES" ]
				then
					echo -n "Policy with date: \"$policy_name\" "
					GREEN; echo active
				fi
			fi
			NC
			[ "$SILENT_MODE" ] || echo
		fi
	done
fi

if [ "$CHECK_RULES" = YES ]
then
	[ "$SILENT_MODE" ] || { BLUE; echo checking rules; NC; }
	GET /policy/api/v1/infra/domains/default/security-policies|jq -r '.results[].display_name' | while read policy_name
	do
		policy_id=$( GET /policy/api/v1/infra/domains/default/security-policies| jq -r ".results[]|select (.display_name==\"$policy_name\").id" )
		GET /policy/api/v1/infra/domains/default/security-policies/$policy_id|jq -r '.rules[].display_name' | while read rule_name
		do
			if echo $rule_name|grep '20[0-9][0-9]-[01][0-9]-[0-3][0-9]' >/dev/null
			then
				rule_date=$(echo $rule_name | sed -e 's/^.*\(20[0-9][0-9]-[01][0-9]-[0-3][0-9]\).*/\1/')
				rule_seconds=$(date -d $rule_date +%s)
				now_seconds=$(date +%s)
				if [ "$now_seconds" -gt "$rule_seconds" ]
				then
				echo -n "Rule with date in policy \"$policy_name\": \"$rule_name\" "
					RED; echo expired
					rule_path=$(GET /policy/api/v1/infra/domains/default/security-policies/$policy_id|jq ".rules[]|select (.display_name==\"$rule_name\").path")
					if [ "$DO_CLEANUP" = IReallyWantToCleanup ]
					then
						echo "   DELETE /policy/api/v1$rule_path"
						eval DELETE /policy/api/v1$rule_path
					else
						echo "use the following command to delete it:"
						echo "   DELETE /policy/api/v1$rule_path"
					fi
				else
					if [ ! "$CHECK_EXPIRED_ONLY" = "YES" ]
					then
						echo -n "Rule with date in policy \"$policy_name\": \"$rule_name\" "
						GREEN; echo active
					fi
				fi
				NC
				[ "$SILENT_MODE" ] || echo
			fi
		done
	done
fi

if [ "$OUTPUT_FILENAME" ]
then
	output_size=$(wc -c $OUTPUT_FILENAME|cut -f 1 -d ' ')
	if [ $output_size -eq 0 ]
	then
		rm -f "$OUTPUT_FILENAME"
	fi
fi

